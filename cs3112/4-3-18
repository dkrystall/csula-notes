hash table, insertion is O(1) (constant time)
hash functions: PUT, GET

when you make a key, you generate a hash code for the hash map that maps to the specific value

When two keys map to the same slot, it's called a collision.

h(k) = k%m

<7  ,       BF  > h(k) = k%7 = 0
<14 ,     Mario > h(k) = 14%7 = 0  // o noes they both map to 0, wat do? Open addressing. = 1
<0  , Overwatch > h(k) = 0%7 = 0  // another collision, linear probe to h(k)  = 2
<21 ,Candy Crush>

Open Addressing -
  Linear Probing - h(k) = (k+i) % m,  i = 0,1,2,3,... //Looks for the next available slot.
      In the above problem, there's a collision at 0, so it goes to 1 (k+1),
      Collision at next 0 (OW) goes to 1, sees collision again, goes to 2.
      collision at next 0 (Candy Crush) goes to 1, collision, goes to 2, collision, goes to 3.
    Linear probing is also called the primary cluster.

  Quadratic probing -
    h(k) = ck + ci + ci^2 , i = 0,1,2^2, 3^2, 4^2,...

  Double Hashing -
    h(k) = (k + i h'(k))
    // still have the same clustering problem

Closed Addressing -
  Separate Chaining, when it sees a collision, it creates a new bucket (linked list). most effective way of dealing with collisions.


Multiplicative Method -  m: constant, k: key, A: 0<A<1, mod 1: removes decimal. /This method also kinda sucks.
  h(k) = { m (kA mod 1)}

  Step 1: Choose A. A = s/(2^w), 0 < S < 2^w
  Step 2: Multiply k by A*2^w
  Step 3: result  (r1)(2^w) + (r0)
  step 4: extract p bits.

  k = 123456   m = 2^14    p = 14    w = 32     A = s/(2^w) s = 2,654,435,769   A = 2,654,435,769/ 2^32 ≅ (sqrt(5) - 1) / 2
  h(123456) = {2^14 (123456 * 2,654,435,769/ 2^32) mod 1}
            = {2^14 (76300*2^32 + 17612864 / 2^32) mod 1}
            = {2^14 * 0.004100814}
            = {67.1877}
            = 67

Universal Hash Function
  1) Picks one of several hash functions and they all get stored in the same table.
  2) Pick a large prime number, larger than every key in key universe.
      Let Zp = {0,1,....,p-1}
          Zp* = {1,.....,p-1}


  3) Define has function 'hab' for any  'a ∈ Zp*' and any 'b ∈ Zp'
  m: size of table, p: large prime number, a: 1 <= a < p b: 0 <= b < p
    hab(k) = ((ak+b) mod p) mod m

  4) The family of all such functions is
    Hpm = { hab: a ∈ Zp* AND b ∈ Zp}


    Key Space: [1,8,6,5] , a = 3, b = 4, ex: m = 7, p = 17  //p must be larger than number in keyspace
    H34(8) = ((3*8+4)%17)%6
           = 5
    H34(1) = ((3*1+4)%17)%6
           = 1
    H34(6) = ((3*6+4)%17)%6

    Properties of Universal Hash Function:
      1. it contains p(p-1) distinct hash functions
      2. Any hab ∈ Hpm, distinct input k and l map to distinct values r and s at "mod p" level, thus no collision at 'mod p' level.
      3. Worst case scenario is 1/p(p-1)
      4. hab(k) = ((ak+b) mod p) mod m   m=5, p=19, key-space=[19] Address:[0][1][2][3][4][5][6][7][8][9][10][11][12][13][14][15][16][17][18]
         hab(l) = ((al+b) mod p) mod m                             Key    :[1][2][3][4][5][1][2][3][4][5]

         Probability of collision at `mod m` :
         For a given value r, there are p-1 possible values of s. The number of value s such that s/=r and r%m = s%m is at most [p/m]-1
         [p/m] -1 <= (p+m-1)/m - 1 = p-1/m
          s%m = r%m
         Pr{s = r%m} = p-1/m * 1/p-1 = 1/m
         Pr{hab(k) = hab(l)} = 1/m

  Perfect Hashing:
    1) Create two levels of hash table, each level we will use UHF
    2) First Level: Hashing with Chaining
    3) Second Level: Use the has table Sj, let the size of Sj be the square of the num of elements in the hash table Sj

    keys: {10,22,37,40,52,60,70,72,75}
    m = 9, p = 101, a = 3, b = 42

    h3,42(10)=((3*10+42)%101)%9 = 0
    h3,42(22)=((3*22+42)%101)%9 = 7
    h3,42(37)=((3*37+42)%101)%9 = 7
    h3,42(40)=((3*40+42)%101)%9 = 7
    h3,42(52)=((3*52+42)%101)%9 = 7
    h3,42(60)=((3*60+42)%101)%9 = 2
    h3,42(70)=((3*70+42)%101)%9 = 5
    h3,42(72)=((3*72+42)%101)%9 = 2
    h3,42(75)=((3*75+42)%101)%9 = 2
     0  1     2       3 4 5  6     7          8  INDEXES
    [10, , [60,72,75], , ,70, , [22,37,40,52], ]  //For the subarrays you make separate hash tables.
               m a b
    index 0 = [1,0,0] -> 10
                             m  a  b /New hash table for collisions
    index 2 = [60,72,75] -> [9,10,18] -> [0,0,0,60,72,0,0,75,0]

    Load Factor = (Number of elements / Capacity of hash table) < .75

    re-hashing:

If there is satellite data in what you're sorting, being stable matters. (Satellite data is when you have multiple values for the same key)

Stable Sorts: Counting Sort, Radix, Merge, Insertion
Non-Stable: Heap Sort, QUick Sort, Selection
