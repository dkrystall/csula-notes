Lower Bound for Comparison Sort:

Three element List <A1, A2, A3>

1) Compare first and second element
            A1 <= A2
    T        or     F
    <A1, A2>           or          <A2, A1>   Then compare A2 with A3 or A1 with A3 depending on result

  <A2 <= A3 >                     <A1 <= A3>
    T       or   F                    T         or    F
  <A1,A2,A3>  <A1<=A3>              <A2, A1, A3>    < A2<=A3 >
          <A1,A3,A2> <A3, A1, A2>            <A2,A3,A1> <A3, A2, A1>

In order to sort, we need the longest leaf node path from the root. That will be the sorted list.
The longest path is the height.

There will be no more than n! leaf nodes.     n! <= Leaf Node  <= 2^h

n! <= 2^h
lg(n!) <= h
h = Î©(nlgn)   is Upper Bound

-------------------------
countingSort(A,B,C) O(n)- Good for lists with a small range lots of repetitions (Good for Dates), mostly just for raw numbers. Biggest issue is space
let C = new [0...k]
var i = 0
for (i..k)
  C[i] = 0
var j = 1
for (j..A.Length)
  C[A[j]] = C[A[j]]+1
for (i = 1 .. k)
  C[i] = C[i] + C[i-1]
for (j=A.length down to 1)
  B[C[A[j]]] = A[j]
  C[A[j]] = C[A[j]]-1

A = {2,5,3,0,2,3,0,3}

-------------------------------
radixSort() - Sorted be digits in One's place, Only options are 0-9 (10 digits)
Swapping takes up a lot of memory

329
457
657
839
436
720
355

Bucket Sort - good if the range on the data is huge, because the buckets themselves still need to be sorted.
