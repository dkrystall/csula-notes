1-23-17

Algorithm -
  Well Defined procedure
  Completes within a finite amount of time
  Evaluated by Correctness and Efficiency

  How to prove Correctness? Direct Proof, Contradiction
    Direct -
      Let a, b, c be integers.
      Prove that if a divides b and a divides c, Then a divides b - c.
      1) b = a*n
      2) c = a*m
      3) b - c = a(n-m)
      Thus a divides (b-c)
    Contradiction -
      assume a does not divide b-c,
      Then k -> a*k = b-c
      However,
        1) b=a*n
        2) c=a*m
        3) b-c = a(n-m), when k = n-m
      Therefore, the assumption that a does not divide b-c is incorrect
        Thus, a divides (b-c)
    Induction -
      Prove all n are in N
      1+3+5+..+(2n-1) = n^2
      1+3+5 = 3^2
      9 = 9 ✔
      1) 1 = 1^2
      2) 1+3+5+...+(2n-1) - n^2
      1+3+5+...+(2n-1)+(2(n+1)-1) =(n+1)^2
      n^2 + 2(n+1) = (n+1)^2
      n^2 + 2n + 1 = n^2 + 2n + 1

  Time Complexity - Algorithm Efficiency
    O(n^2)
    n: time
    10: 100
    100: 10,000
    1,000: 1,000,000

f0 = 0
f1 = 1
f2 = f0 + f1 = 1
f3 = f1 + f2 = 2
f4 = f2 + f3 = 3
fn = fn-2 + fn-1

------------------
1/25/18 Binary Search vs Linear Search

log(base2)2 = 1
log(baseA)B^k = klog(baseA)B

n/2^k = 1
n = 2^k
ln n = ln2^k
ln n = kln2
k = log n

Worst case is when you don't find the element. Or if it's the last

Worst Case n
After n comparisons, we're guaranteed to find the solution
n     n     log n
10   | 10   | 2^4 = 16 > 10
100  | 100  | 2^7 = 128 > 100
1000 | 1000 | 2^10 = 1024 > 1000

When n gets very large, we can see how the worst case will effect running time
If there's only 1 element in a list it is trivially sorted

Insertion Sort
Array index starts at 1 for Algorithms
InsertionSort(A){                   Cost in time
  for j=2...A.length{             | C1 = n times
    key=A[j]                      | C2 = n-1
    i = j-1                       | C3 = n-1
    while (i > 0 and A[i] > key){ | C4 = ∑ j=2 to n,  t(subj)
      A[i+1]=A[i]                 | C5 = ∑ j=2 to n,  t(subj-1)
      i=i-1                       | C6 = ∑ j=2 to n,  t(subj-1)
    }                             |
    A[i+1] = key                  | C7 = n-1
  }
 }
     i|key    i=8, key=5
A = [8,5 ,6,9,1,2,7,0,3,4]
       i|key   i=8, key=6
A = [5,8,6 ,9,1,2,7,0,3,4]
         i|key i =8, key=9
A = [5,6,8,9 ,1,2,7,0,3,4]
           i|key  i=9, key=1
A = [5,6,8,9,1  ,2,7,0,3,4] i>0, a[i] !> key
A = [5,6,8,1,9  ,2,7,0,3,4] i>0, a[i] !> key
A = [5,6,1,8,9  ,2,7,0,3,4] i>0, a[i] !> key
A = [5,1,6,8,9  ,2,7,0,3,4] i>0, a[i] !> key
A = [1,5,6,8,9  ,2,7,0,3,4] i>0, a[i] !> key

Loop Invariant - All algorithm must pass this test to be true
  Initialization: A Sub-array that consists of only one element is sorted.
  Maintenance:
    1) a sub-array of A[1...j-1] is sorted before the next loop  //[1...j-1] = One to j-1 elements.
    2) a sub-array of A[1...j] is sorted  after the loop execution
    3) a sub-array of A[1...j] is sorted before running the next loop
  Termination: The algorithm terminates when j > A.length = n ,
    Thus when it's terminated j=n+1 and we have a sub-array A[1...n]. We know the sub array A[1...n] is sorted.

∑ j=2 to n,  t(subj) = 2+3+...+n+1-1,
S = 1+2+...+n
Sʹ=n+(n-1)+(n-2)+...+2+1
2S = (n+1)+(n+1)+...+(n+1)
   = (n+1)
S = n(n+1) / 2

∑ j=2 to n,  t(subj)-1 = 2+3+...+n+1-1,
                       = n(n+1) / 2
To sort a list with T(n) = c1n+c2(n-1)+c3(n-1)+c4(n(n+1)/2 - 1)+c5(n(n-1)/2 - 1)+c6(n(n-1)/2 - 1) + n-1
Efficiency of Insertion Sort = an² +bn +c  /n² is dominant term, Dominating term contributes the most.
Time complexity = O(n²)
